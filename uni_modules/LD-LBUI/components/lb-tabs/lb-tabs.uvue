<template>
	<view class="lb-tabs">
		<scroll-view class="lb-tabs__headers" direction="horizontal" :show-scrollbar="false" scroll-with-animation
			:scroll-into-view="moveTabId">
			<view class="tabs-list">
				<view class="tabs-list__item" @tap="setActiveTab(pane.value)" :id="'tab_item__'+String(pane.value)"
					:class="{'is-active':modelValue==pane.value}" v-for="pane in panes" :key="pane.value">
					<text>{{pane.label}}</text>
					<view v-show="modelValue == pane.value" class="tabs-list__item-activeline"></view>
				</view>
			</view>
		</scroll-view>

		<slot></slot>
	</view>
</template>
<script setup lang="uts">
	const modelValue = defineModel()
	const props = defineProps({

	})

	const panes = ref<tabInfo[]>([])
	const emit = defineEmits(['change'])
	const moveTabId = ref('')

	type tabInfo = {
		value : string,
		label : string,
		isActiveRef : Ref
	}

	const tabs = {
		addTab(tabInfo : tabInfo) {
			panes.value.push(tabInfo);

			if (panes.value.length == 1 && !modelValue.value) {
				setActiveTab(tabInfo.value)
			}
		},
		removeTab(tabValue) {
			const index = panes.value.findIndex(tab => tab.value === tabValue);
			if (index !== -1) {
				panes.value.splice(index, 1);
			}
			// 如果移除的是当前激活的 tab，则尝试激活下一个或上一个
			if (tabValue === modelValue.value) {
				const nextTab = panes.value[index] || panes.value[index - 1];
				if (nextTab) {
					setActiveTab(nextTab.value);
				} else {
					// 如果没有 tab 了，清空激活状态
					setActiveTab('');
				}
			}
		}
	}

	const setActiveTab = (val) => {
		modelValue.value = val
		const paneData = panes.value.find(p => p.value == val)
		emit('change', { val, paneData })
		updateActiveTab()
		moveTabs(val)
	}

	const moveTabs = (val) => {
		const prefix = 'tab_item__';
		const thisItem = prefix + String(val);
		const thisIndex = panes.value.findIndex(p => p.value == val);
		const previousIndex = thisIndex - 1 < 0 ? 0 : thisIndex - 1;

		const previousItem = prefix + String(panes.value[previousIndex].value)
		moveTabId.value = previousItem
	}

	const updateActiveTab = () => {
		panes.value.forEach(pane => {
			if (pane.updateActive) {
				pane.updateActive(modelValue.value)
			}
		})
	}

	provide('lb-tabs-root', tabs)

	onMounted(() => {
		nextTick(() => {
			updateActiveTab(modelValue.value)
		})
	})
</script>
<style lang="scss" scoped>
	.lb-tabs {
		background: var(--bg);
		width: 100%;
		box-sizing: border-box;
	}

	.lb-tabs__headers {
		width: 100%;
		height: 45px;
		background: var(--bg);
		border-bottom: 1px solid var(--border);
		white-space: nowrap;
		display: flex;
		align-items: center;
		flex-direction: row;
	}

	.tabs-list {
		display: flex;
		flex-direction: row;
		justify-content: flex-start;
		align-items: center;
	}

	.tabs-list__item {
		position: relative;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		flex: 1;
		text-align: center;
		padding: 0 15px;
		height: 45px;
		min-width: 80px;
		box-sizing: border-box;

		&.is-active {
			color: var(--primary-base);
			font-weight: var(--fw-bold);
		}
	}

	.tabs-list__item-activeline {
		height: 3px;
		background: var(--primary-base);
		position: absolute;
		bottom: 0;
		left: 42%;
		width: 16px;
		border-radius: 4px;
		z-index: 1;
	}
</style>